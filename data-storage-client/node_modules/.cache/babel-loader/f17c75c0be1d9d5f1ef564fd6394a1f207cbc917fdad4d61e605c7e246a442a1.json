{"ast":null,"code":"var _jsxFileName = \"D:\\\\react\\\\myFiles\\\\data-storage-client\\\\src\\\\components\\\\UploadFile.jsx\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport fetchFiles from \"./FileList\"; // Adjust the import path as necessary\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction UploadFile() {\n  _s();\n  const [file, setFile] = useState(null);\n  const [uploading, setUploading] = useState(false);\n  const handleFileChange = e => {\n    const selectedFile = e.target.files[0];\n    if (selectedFile) {\n      // Optional: validate file size/type here\n      setFile(selectedFile);\n    }\n  };\n  const handleUpload = async () => {\n    if (!file) return alert(\"Please select a file first!\");\n    const formData = new FormData();\n    formData.append(\"file\", file);\n    try {\n      setUploading(true);\n      const token = localStorage.getItem(\"token\");\n      if (!token) {\n        alert(\"Please login first.\");\n        return;\n      }\n      await axios.post(\"http://localhost:5000/api/files/upload\", formData, {\n        headers: {\n          \"Content-Type\": \"multipart/form-data\",\n          Authorization: `Bearer ${token}`\n        }\n      });\n      alert(\"✅ File uploaded successfully!\");\n      setFile(null); // reset file input\n      const files = document.getElementById(\"fileInput\").value = null;\n      if (files) {\n        files.value = null;\n        fetchFiles; // Clear the file input\n      }\n      // fetchFiles(); // Refresh file list after upload\n    } catch (err) {\n      console.error(err);\n      alert(\"❌ File upload failed. Please try again.\");\n    } finally {\n      setUploading(false);\n    }\n  };\n  // useEffect(() => {\n  // fetchFiles();\n  // }, []);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Upload a File\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      id: \"fileInput\",\n      type: \"file\",\n      onChange: handleFileChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), file && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Selected: \", /*#__PURE__*/_jsxDEV(\"strong\", {\n        children: file.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 29\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 16\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleUpload,\n      disabled: uploading,\n      children: uploading ? \"Uploading...\" : \"Upload\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n}\n_s(UploadFile, \"XzDh85CJXY53/nU7yS/Rq6ZjQAg=\");\n_c = UploadFile;\nexport default UploadFile;\nvar _c;\n$RefreshReg$(_c, \"UploadFile\");","map":{"version":3,"names":["useState","useEffect","axios","fetchFiles","jsxDEV","_jsxDEV","UploadFile","_s","file","setFile","uploading","setUploading","handleFileChange","e","selectedFile","target","files","handleUpload","alert","formData","FormData","append","token","localStorage","getItem","post","headers","Authorization","document","getElementById","value","err","console","error","children","fileName","_jsxFileName","lineNumber","columnNumber","id","type","onChange","name","onClick","disabled","_c","$RefreshReg$"],"sources":["D:/react/myFiles/data-storage-client/src/components/UploadFile.jsx"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport fetchFiles  from \"./FileList\"; // Adjust the import path as necessary\r\n\r\nfunction UploadFile() {\r\n  const [file, setFile] = useState(null);\r\n  const [uploading, setUploading] = useState(false);\r\n\r\n  const handleFileChange = (e) => {\r\n    const selectedFile = e.target.files[0];\r\n    if (selectedFile) {\r\n      // Optional: validate file size/type here\r\n      setFile(selectedFile);\r\n    }\r\n  };\r\n\r\n  const handleUpload = async () => {\r\n    if (!file) return alert(\"Please select a file first!\");\r\n\r\n    const formData = new FormData();\r\n    formData.append(\"file\", file);\r\n\r\n    try {\r\n      setUploading(true);\r\n      const token = localStorage.getItem(\"token\");\r\n            if (!token) {\r\n        alert(\"Please login first.\");\r\n        return;\r\n      }\r\n\r\n      await axios.post(\"http://localhost:5000/api/files/upload\", formData, {\r\n        headers: {\r\n          \"Content-Type\": \"multipart/form-data\",\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n      });\r\n\r\n      alert(\"✅ File uploaded successfully!\");\r\n      setFile(null); // reset file input\r\n      const files =document.getElementById(\"fileInput\").value = null;\r\n      if (files) {\r\n        files.value = null;\r\n        fetchFiles // Clear the file input\r\n      }\r\n      // fetchFiles(); // Refresh file list after upload\r\n    } catch (err) {\r\n      console.error(err);\r\n      alert(\"❌ File upload failed. Please try again.\");\r\n    } finally {\r\n      setUploading(false);\r\n    }\r\n  };\r\n    // useEffect(() => {\r\n      // fetchFiles();\r\n    // }, []);\r\n\r\n  return (\r\n    <div>\r\n      <h3>Upload a File</h3>\r\n      <input id=\"fileInput\" type=\"file\" onChange={handleFileChange} />\r\n      {file && <p>Selected: <strong>{file.name}</strong></p>}\r\n      <button onClick={handleUpload} disabled={uploading}>\r\n        {uploading ? \"Uploading...\" : \"Upload\"}\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default UploadFile;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}